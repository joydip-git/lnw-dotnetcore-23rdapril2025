where T : struct	
The type argument must be a non-nullable value type, which includes record struct types. For information about nullable value types, see Nullable value types. Because all value types have an accessible parameterless constructor, either declared or implicit, the struct constraint implies the new() constraint and can't be combined with the new() constraint. You can't combine the struct constraint with the unmanaged constraint.

where T : class	
The type argument must be a reference type. This constraint applies also to any class, interface, delegate, or array type. In a nullable context, T must be a non-nullable reference type.

where T : class?	
The type argument must be a reference type, either nullable or non-nullable. This constraint applies also to any class, interface, delegate, or array type, including records.

where T : notnull	The type argument must be a non-nullable type. The argument can be a non-nullable reference type or a non-nullable value type.

where T : unmanaged	
The type argument must be a non-nullable unmanaged type. The unmanaged constraint implies the struct constraint and can't be combined with either the struct or new() constraints.

where T : new()	
The type argument must have a public parameterless constructor. When used together with other constraints, the new() constraint must be specified last. The new() constraint can't be combined with the struct and unmanaged constraints.

where T : <base class name>	
The type argument must be or derive from the specified base class. In a nullable context, T must be a non-nullable reference type derived from the specified base class.

where T : <base class name>?	
The type argument must be or derive from the specified base class. In a nullable context, T can be either a nullable or non-nullable type derived from the specified base class.

where T : <interface name>	
The type argument must be or implement the specified interface. Multiple interface constraints can be specified. The constraining interface can also be generic. In a nullable context, T must be a non-nullable type that implements the specified interface.

where T : <interface name>?	
The type argument must be or implement the specified interface. Multiple interface constraints can be specified. The constraining interface can also be generic. In a nullable context, T can be a nullable reference type, a non-nullable reference type, or a value type. T can't be a nullable value type.

where T : U	The type argument supplied for T must be or derive from the argument supplied for U. In a nullable context, if U is a non-nullable reference type, T must be a non-nullable reference type. If U is a nullable reference type, T can be either nullable or non-nullable.

where T : default	
This constraint resolves the ambiguity when you need to specify an unconstrained type parameter when you override a method or provide an explicit interface implementation. The default constraint implies the base method without either the class or struct constraint. For more information, see the default constraint spec proposal.

where T : allows ref struct	
This anti-constraint declares that the type argument for T can be a ref struct type. The generic type or method must obey ref safety rules for any instance of T because it might be a ref struct.


You can apply at most one of the struct, class, class?, notnull, and unmanaged constraints. If you supply any of these constraints, it must be the first constraint specified for that type parameter.
The base class constraint (where T : Base or where T : Base?) can't be combined with any of the constraints struct, class, class?, notnull, or unmanaged.
You can apply at most one base class constraint, in either form. If you want to support the nullable base type, use Base?.
You can't name both the non-nullable and nullable form of an interface as a constraint.
The new() constraint can't be combined with the struct or unmanaged constraint. If you specify the new() constraint, it must be the last constraint for that type parameter. Anti-constraints, if applicable, can follow the new() constraint.
The default constraint can be applied only on override or explicit interface implementations. It can't be combined with either the struct or class constraints.
The allows ref struct anti-constraint can't be combined with the class or class? constraint.
The allows ref struct anti-constraint must follow all constraints for that type parameter.